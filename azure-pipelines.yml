# Universal Windows Platform

# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x86|x64|ARM'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    platform: 'x86'
    solution: '$(solution)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'
- job: SAST
      displayName: Fortify Scancentral SAST
      dependsOn:
       - Build
      pool: Default
      steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            Write-Host --- Versão do Java ---
            java -version
            Write-Host --- Versão do FCLI ---
            fcli --version
            Write-Host --- Versão do DEBRICKED CLI ---
            debricked -v
            Write-Host --- Loga no Fortify SSC e SC-SAST Controller ---
            fcli ssc session login --url=${env:_FCLI_DEFAULT_SSC_URL} --ci-token=${env:_FCLI_DEFAULT_SSC_CI_TOKEN}
            fcli sc-sast session login --client-auth-token=$(_FCLI_DEFAULT_SC_SAST_CLIENT_AUTH_TOKEN) --ssc-url=${env:_FCLI_DEFAULT_SSC_URL} --ssc-ci-token=${env:_FCLI_DEFAULT_SSC_CI_TOKEN}
            Write-Host --- Empacota a Aplicação para o Scancentral ---
            scancentral package --output APP.zip
            Write-Host --- Envia o Artefato para o Scancentral Controller ---
            fcli sc-sast scan start --package-file=APP.zip --sensor-version=24.2 --publish-to=${env:_SSC_APP_VERSION_ID} --ssc-ci-token=${env:_FCLI_DEFAULT_SSC_CI_TOKEN} --store=job:jobToken
            Write-Host --- Debricked Scan ---
            debricked scan --access-token=${env:_DEBRICKED_TOKEN} --repository=${env:_SSC_APP_VERSION_ID} --commit=$(Build.SourceVersion)
            Write-Host --- Importa os Resultados Debricked no SSC  
            fcli ssc artifact import-debricked --debricked-access-token=${env:_DEBRICKED_TOKEN} --appversion=${env:_SSC_APP_VERSION_ID} --repository=${env:_SSC_APP_VERSION_ID} --branch=$(Build.SourceBranchName)
            Write-Host --- Espera Scan Fortify Acabar ---
            fcli sc-sast scan wait-for --any-ssc-state=PROCESS_COMPLETE --timeout=2h ::job::jobToken --store=sscArtifactId
            Write-Host --- Consulta ID do Ultimo Artefacto ---
            fcli ssc appversion refresh-metrics ${env:_SSC_APP_VERSION_ID}
            fcli ssc issue list --appversion=${env:_SSC_APP_VERSION_ID}
            Write-Host --- Recuperação do Ultimo Artefacto Scaneado ---
            fcli ssc appversion download-state --include-sources --file='app.fpr' ${env:_SSC_APP_VERSION_ID}
            Write-Host --- Envia FPR => Mobb.Ai ---
            npx mobbdev analyze --ci --scan-file=app.fpr --repo=${env:_CI_PROJECT_URL} --ref=$(Build.SourceVersion) --api-key=${env:MOBB_API_KEY}
